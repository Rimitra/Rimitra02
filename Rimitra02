{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8f0a873a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import shutil\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "\n",
    "# Define the path to our dataset : \n",
    "dataset_path = \"C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\"\n",
    "\n",
    "# Getting  a list of all image files in the dataset directory : \n",
    "\n",
    "image_files = []\n",
    "labels = []\n",
    "\n",
    "for class_name in os.listdir(dataset_path):\n",
    "    class_path = os.path.join(dataset_path, class_name)\n",
    "    if os.path.isdir(class_path):\n",
    "        for image_filename in os.listdir(class_path):\n",
    "            if image_filename.endswith('.jpg'):  # Adjust the file extension as needed \n",
    "                image_files.append(os.path.join(class_path, image_filename))\n",
    "                labels.append(class_name)\n",
    "\n",
    "# Split the data into training, validation, and test sets\n",
    "train_ratio = 0.7  # 70% for training\n",
    "val_ratio = 0.15  # 15% for validation\n",
    "test_ratio = 0.15  # 15% for testing\n",
    "\n",
    "X_train, X_temp, y_train, y_temp = train_test_split(\n",
    "    image_files, labels, test_size=1 - train_ratio, random_state=42)\n",
    "\n",
    "X_val, X_test, y_val, y_test = train_test_split(\n",
    "    X_temp, y_temp, test_size=test_ratio / (test_ratio + val_ratio), random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "16824c7e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dcfd5e95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c0aeaacd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# X_temp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ff3986a",
   "metadata": {},
   "source": [
    "## Define the root directory where we want to create the train, validation, and test folders\n",
    "root_dir = \"C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\"\n",
    "\n",
    "## Define the names of the train, validation, and test folders\n",
    "\n",
    "train_dir = os.path.join(root_dir, \"train\")\n",
    "val_dir = os.path.join(root_dir, \"validation\")\n",
    "test_dir = os.path.join(root_dir, \"test\")\n",
    "\n",
    "## Create the directories if they don't exist\n",
    "\n",
    "os.makedirs(train_dir, exist_ok=True)\n",
    "os.makedirs(val_dir, exist_ok=True)\n",
    "os.makedirs(test_dir, exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d2a723",
   "metadata": {},
   "source": [
    "### Move the training data to the train folder\n",
    "\n",
    "train_dir = \"C:\\\\Users\\\\.m\\\\Downloads\\\\one+hundred+plant+species+leaves+data+set\\\\one+hundred+plant+species+leaves+data+set\\\\100 leaves plant species\\\\train\"\n",
    "for image_path, label in zip(X_train, y_train):\n",
    "    class_train_dir = os.path.join(train_dir, label)\n",
    "    os.makedirs(class_train_dir, exist_ok=True)\n",
    "    shutil.copy(root_dir,train_dir)\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "0a72ee2b",
   "metadata": {},
   "source": [
    "for image_path, label in zip(X_train, y_train):\n",
    "    class_train_dir = os.path.join(train_dir, label)\n",
    "    os.makedirs(class_train_dir, exist_ok=True)\n",
    "    shutil.copy(root_dir,train_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f00e4f64",
   "metadata": {},
   "source": [
    "### Move the training data to the train folder\n",
    "\n",
    "train_dir = \"C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\\\\train\"\n",
    "\n",
    "for image_path, label in zip(X_train, y_train):\n",
    "    class_train_dir = os.path.join(train_dir, label)\n",
    "    os.makedirs(class_train_dir, exist_ok=True)\n",
    "    shutil.copy(image_path, class_train_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e0ebc23",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### Move the test data to the test folder\n",
    "\n",
    "test_dir = \"C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\\\\test\"\n",
    "\n",
    "for image_path, label in zip(X_test,y_test):\n",
    "    class_train_dir = os.path.join(test_dir, label)\n",
    "    os.makedirs(class_train_dir, exist_ok=True)\n",
    "    shutil.copy(image_path, class_test_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa12a14a",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ea80c9ba",
   "metadata": {},
   "source": [
    "val_dir = \"C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\\\\validation\"\n",
    "\n",
    "for image_path, label in zip(X_test, y_test):\n",
    "    class_test_dir = os.path.join(test_dir, label)\n",
    "    os.makedirs(class_test_dir, exist_ok=True)\n",
    "    shutil.copy(image_path, class_test_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b654b0",
   "metadata": {},
   "source": [
    "for image_path, label in zip(X_val, y_val):\n",
    "    class_val_dir = os.path.join(val_dir, label)\n",
    "    os.makedirs(class_val_dir, exist_ok=True)\n",
    "    shutil.copy(image_path, class_val_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "261909cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now it's time for Data preprocessing : defining data loaders and generators : \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "62cf8f01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1119 images belonging to 100 classes.\n",
      "Found 240 images belonging to 92 classes.\n",
      "Found 241 images belonging to 95 classes.\n"
     ]
    }
   ],
   "source": [
    "# for preprocessing we need to import ImageDataGenerator :  </> \n",
    "\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "# Define paths to our data splits : >> >> \n",
    "\n",
    "train_data_dir = 'C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\\\\train'\n",
    "\n",
    "validation_data_dir = 'C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\\\\validation'\n",
    "\n",
    "test_data_dir = 'C:\\\\Users\\\\.m\\\\Desktop\\\\100 leaves plant species\\\\data\\\\test'\n",
    "\n",
    "\n",
    "# Set up data generators with preprocessing for each data split\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale=1.0/255.0,  # Normalize pixel values in range of  [0, 1]\n",
    "    rotation_range=20,   # Random rotation within 20 degrees\n",
    "    width_shift_range=0.2,  # Random horizontal shift\n",
    "    height_shift_range=0.2,  # Random vertical shift\n",
    "    shear_range=0.2,     # Shear transformation\n",
    "    zoom_range=0.2,      # Random zoom\n",
    "    horizontal_flip=True,  # Random horizontal flip\n",
    "    fill_mode='nearest'   # How to fill newly created pixels\n",
    ")\n",
    "\n",
    "validation_datagen = ImageDataGenerator(rescale=1.0/255.0)  # Only rescale pixel values for validation\n",
    "test_datagen = ImageDataGenerator(rescale=1.0/255.0)  # Only rescale pixel values for testing\n",
    "\n",
    "# Setting ::> batch size\n",
    "\n",
    "batch_size = 32\n",
    "\n",
    "# Creating data generators\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size=(224, 224),  # Resize images to a fixed size\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical'  # For multi-class classification\n",
    ")\n",
    "\n",
    "validation_generator = validation_datagen.flow_from_directory(\n",
    "    validation_data_dir,\n",
    "    target_size=(224, 224),\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    test_data_dir,\n",
    "    target_size=(224, 224),\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical'\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de2fc46e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e725e69",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
